name: Build and Release Equipment Tracker

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-2022

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2

    - name: Determine solution directory
      id: paths
      shell: pwsh
      run: |
        $sol = Join-Path $PWD 'EquipmentTracker/EquipmentTracker.sln'
        $proj = Join-Path $PWD 'EquipmentTracker/EquipmentTracker.csproj'
        echo "solution=$sol" >> $env:GITHUB_OUTPUT
        echo "project=$proj" >> $env:GITHUB_OUTPUT
        echo "workdir=$PWD" >> $env:GITHUB_OUTPUT

    - name: NuGet restore (solution)
      run: nuget restore "${{ steps.paths.outputs.solution }}" -PackagesDirectory packages

    - name: MSBuild restore (fallback)
      run: msbuild "${{ steps.paths.outputs.solution }}" /t:Restore /p:RestorePackagesConfig=true /p:SolutionDir="${{ steps.paths.outputs.workdir }}\\"

    - name: Build application (project, default config)
      run: msbuild "${{ steps.paths.outputs.project }}" /t:Build /p:Configuration=Release

    - name: Verify build output
      shell: pwsh
      run: |
        $exe = "EquipmentTracker\\bin\\Release\\EquipmentTracker.exe"
        if (-not (Test-Path $exe)) { Write-Error "Missing exe: $exe" }

    - name: Create release directory
      run: |
        mkdir release
        mkdir release/EquipmentTracker

    - name: Copy application files
      run: |
        Copy-Item "EquipmentTracker/bin/Release/EquipmentTracker.exe" "release/EquipmentTracker/"
        Copy-Item "EquipmentTracker/bin/Release/EquipmentTracker.exe.config" "release/EquipmentTracker/" -ErrorAction SilentlyContinue
        Copy-Item "EquipmentTracker/bin/Release/*.dll" "release/EquipmentTracker/" -ErrorAction SilentlyContinue
        Copy-Item "EquipmentTracker/bin/Release/*.pdb" "release/EquipmentTracker/" -ErrorAction SilentlyContinue

    - name: Compute version and tag
      id: release_info
      shell: pwsh
      run: |
        $ref = "${{ github.ref }}"
        $refName = "${{ github.ref_name }}"
        if ($ref -like "refs/tags/*") {
          $tag = $refName
          $version = $refName
        } elseif ([string]::IsNullOrWhiteSpace($refName) -or $refName -eq "master" -or $refName -eq "main") {
          $tag = "v1.0.1-manual"
          $version = $tag
        } else {
          $tag = "v1.0.1-manual"
          $version = $refName
        }
        echo "tag_name=$tag" >> $env:GITHUB_OUTPUT
        echo "version_display=$version" >> $env:GITHUB_OUTPUT
        echo "artifact_name=EquipmentTracker-Windows-AnyCPU-$version.zip" >> $env:GITHUB_OUTPUT

    - name: Create release package
      shell: pwsh
      run: |
        if (-not (Test-Path "release\EquipmentTracker\EquipmentTracker.exe")) { Write-Error "Packaging aborted: exe missing in release directory" }
        Compress-Archive -Path "release/*" -DestinationPath "${{ steps.release_info.outputs.artifact_name }}"

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.release_info.outputs.tag_name }}
        files: |
          ${{ steps.release_info.outputs.artifact_name }}
        name: Equipment Tracker ${{ steps.release_info.outputs.version_display }}
        body: |
          ## Equipment Tracker ${{ steps.release_info.outputs.version_display }}

          ### üì¶ Installation
          1. Download `${{ steps.release_info.outputs.artifact_name }}`
          2. Extract to a temporary folder
          3. Run `INSTALL.bat` as Administrator for automatic installation
          4. Or manually copy files to your preferred location

          ### üîß System Requirements
          - Windows 10 or later
          - .NET Framework 4.8 (pre-installed on most systems)

          ### üìù Notes
          - Built as AnyCPU for broad compatibility
          - SQLite provider is x64; app runs on 64-bit Windows as a 64-bit process
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}