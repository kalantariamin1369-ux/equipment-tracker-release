name: Build and Release Equipment Tracker

on:
  push:
    branches: [ master ]
    tags:
      - 'v*.*.*' # Triggers on tags like v1.0.0
  workflow_dispatch: # Allows manual triggering

env:
  PROJECT_NAME: EquipmentTracker
  SOLUTION_FILE: EquipmentTracker.sln
  BUILD_CONFIGURATION: Release
  DOTNET_FRAMEWORK_VERSION: net48

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.2.0

    - name: Restore NuGet packages
      run: nuget restore ${{ env.SOLUTION_FILE }}

    - name: Build application
      run: msbuild ${{ env.SOLUTION_FILE }} /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform="Any CPU"

    - name: Get current version from AssemblyInfo.cs
      id: get_version
      run: |
        $version = (Select-String -Path "${{ env.PROJECT_NAME }}\Properties\AssemblyInfo.cs" -Pattern "^\[assembly: AssemblyVersion\(\"(.+?)\"\]").Matches.Groups[1].Value
        echo "APP_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
      shell: pwsh

    - name: Create release artifact (ZIP)
      run: |
        $sourcePath = "${{ env.PROJECT_NAME }}\bin\${{ env.BUILD_CONFIGURATION }}"
        $zipFileName = "${{ env.PROJECT_NAME }}-Windows-x64-${{ env.APP_VERSION }}.zip"
        Compress-Archive -Path "$sourcePath\*" -DestinationPath $zipFileName
      shell: pwsh

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-Windows-x64
        path: ${{ env.PROJECT_NAME }}-Windows-x64-${{ env.APP_VERSION }}.zip

    - name: Create GitHub Release (on tag push)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.PROJECT_NAME }}-Windows-x64-${{ env.APP_VERSION }}.zip
        name: Release ${{ env.PROJECT_NAME }} v${{ env.APP_VERSION }}
        tag_name: ${{ github.ref_name }}
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
